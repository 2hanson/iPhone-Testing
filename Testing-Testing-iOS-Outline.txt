Sections:
-Intro
--iOS development tips
--developer.apple.com/ios
--Stackoverflow
-Reasoning
--Why Test Automatically
--Why Unit Test
--Why Integration Test
--Why Interaction Test
--Why Mock
--Evaluation
---Ease of use for writing tests
---Error reporting
---Debugging
---Integration with Xcode
---Integration with the command line
-Unit
--OCUnit
---Setup
http://developer.apple.com/library/ios/#documentation/Xcode/Conceptual/iphone_development/135-Unit_Testing_Applications/unit_testing_applications.html
----Logic
-----Really easy! Just add a unit testing target.
----Application
-----Duplicate your app target.  This target will host the ocunit test bundle which will hold the code and resources to test your app.
-----Add a unit testing target.
-----Add your unit testing target to your host target's dependencies.  This will ensure that your unit test bundle is built before your host.
-----Add your unit test bundle to your host target's "Copy Bundle Resources" phase.  This hosts your tests inside your host.
-----A source file can only exist in the either the test bundle or the Application Host bundle.  When you duplicate your app's target to make the Application Host, all of your sources will exist in the Application Host.  When a test requires a source, you must remove it from your Application Host before adding it to the test bundle or you'll see an error like this:
objc[13130]: Class Die is implemented in both /var/mobile/Applications/8B61A346-2BD5-4659-B23C-C8AEA5C9B418/DiceGame.app/DiceGame and /private/var/mobile/Applications/8B61A346-2BD5-4659-B23C-C8AEA5C9B418/DiceGame.app/BuiltInApplicationUnitTest.octest/BuiltInApplicationUnitTest. One of the two will be used. Which one is undefined.
And it can manifest itself as errors like this:
http://stackoverflow.com/questions/5364074/
-----A source file only has to be added to the test bundle if you use static methods from your source class in your test.  I don't know why this happens, please answer http://stackoverflow.com/questions/7210211/ if you know.  For organization purposes, I think it best to just move all your files over to the test bundle.
---Write a test
----a test method starts with "test", takes no argument
---Running
----http://stackoverflow.com/questions/1568992/
----Logic Tests
-----Use the "Test" scheme only in the Simulator, not on device
-----Can't use UIKit, not sure about other limitations
-----Run individual tests by editing the "Test" scheme.
----Application Tests
-----Use the "Run" scheme only on device, not in simulator
-----Can't run individual tests unless you remove them from the target or comment out their methods.
---Errors
----Logic Tests
-----Errors are reported within the Issue Navigator and in your source file as well as in the console output.
-----Errors in source editor stay around until the test passes.
----Application Tests
-----Errors are only reported in console output.
---Debugging
-----Easy, just set a breakpoint and run your tests again
---Command Line
----Logic
-----For JUnit-style output: https://github.com/hborders/BPOCUnitXMLReporter
----Application Tests
-----Application Tests only run on device and thus can't be run or triggered from the command line.
------http://developer.apple.com/library/ios/#documentation/Xcode/Conceptual/iphone_development/135-Unit_Testing_Applications/unit_testing_applications.html
--GTM
---Setup
---Write a test
---Running
---Errors
---Debugging
----Open the "Run Script" build phase and comment out your 
---Command Line
--GHUnit
---Setup
---Write a test
---Running
---Errors
---Debugging
---Command Line
-Interaction
--UIAutomation
---Setup
---Write a test
---Running
---Errors
---Debugging
---Command Line
--UISpec
---Setup
---Write a test
---Running
---Errors
---Debugging
---Command Line
--KIF
---Setup
---Write a test
---Running
---Errors
---Debugging
---Command Line
-Mocking
-Custom Assertions